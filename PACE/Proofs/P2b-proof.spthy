theory P2b begin

// Function signature and definition of the equational theory E

functions: fst/1, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Shared_Key:
   [ Fr( ~skAB ) ] --[ NotEq( $A, $B ) ]-> [ !SKey( $A, $B, ~skAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_SK:
   [ !SKey( A, B, skAB ) ]
  --[ Reveal( A ), Reveal( B ) ]->
   [ Out( skAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !SKey( I, R, skAB ), !SKey( R, I, skBA ) ]
  --[ Create_A( I, ~id ) ]->
   [ St_A_1( I, ~id, skAB, skBA, R ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !SKey( I, R, skAB ), !SKey( R, I, skBA ) ]
  --[ Create_B( R, ~id ) ]->
   [ St_B_1( R, ~id, skAB, skBA, I ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_Send:
   [ St_A_1( I, ~id, skAB, skBA, R ), Fr( ~x ) ]
  --[ Send( I, <'1', ~x> ) ]->
   [ St_A_2( I, ~id, skAB, skBA, R, ~x ), Out( <'1', ~x> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_Receive:
   [ St_B_1( R, ~id, skAB, skBA, I ), In( <'1', x> ) ]
  --[ Receive( R, <'1', x> ) ]->
   [ St_B_2( R, ~id, skAB, skBA, I, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_Send:
   [ St_B_2( R, ~id, skAB, skBA, I, x ), Fr( ~y ) ]
  --[ Send( R, <'2', ~y> ), Running( R, I, <'I', 'R', x, ~y> ) ]->
   [ St_B_3( R, ~id, skAB, skBA, I, x, ~y ), Out( <'2', ~y> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2_Receive:
   [ St_A_2( I, ~id, skAB, skBA, R, x ), In( <'2', y> ) ]
  --[ Receive( I, <'2', y> ) ]->
   [ St_A_3( I, ~id, skAB, skBA, R, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_3_Send:
   [ St_A_3( I, ~id, skAB, skBA, R, x, y ) ]
  --[
  Send( I, mac(<'3', y, x>, skAB) ),
  Running( I, R, <'R', 'I', x, y> )
  ]->
   [
   St_A_4( I, ~id, skAB, skBA, R, x, y ),
   Out( mac(<'3', y, x>, skAB) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_3_Receive:
   [
   St_B_3( R, ~id, skAB, skBA, I, x, y ), In( mac(<'3', y, x>, skAB) )
   ]
  --[
  Receive( R, mac(<'3', y, x>, skAB) ),
  Commit( R, I, <'R', 'I', x, y> ), Honest( R ), Honest( I )
  ]->
   [ St_B_4( R, ~id, skAB, skBA, I, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_4_Send:
   [ St_B_4( R, ~id, skAB, skBA, I, x, y ) ]
  --[ Send( R, mac(<'4', x, y>, skBA) ) ]->
   [
   St_B_5( R, ~id, skAB, skBA, I, x, y ),
   Out( mac(<'4', x, y>, skBA) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_4_Receive:
   [
   St_A_4( I, ~id, skAB, skBA, R, x, y ), In( mac(<'4', x, y>, skBA) )
   ]
  --[
  Receive( I, mac(<'4', x, y>, skBA) ),
  Commit( I, R, <'I', 'R', x, y> ), Honest( R ), Honest( I ),
  Finish( )
  ]->
   [ St_A_5( I, ~id, skAB, skBA, R, x, y ) ]

  /* has exactly the trivial AC variant */

lemma executable:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i) ∧ ∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥"
*/
simplify
solve( St_A_4( I, ~id, skAB, skBA, R, x, y ) ▶₀ #i )
  case A_3_Send
  solve( !KU( mac(<'4', ~x, y>, ~skAB.1) ) @ #vk )
    case B_4_Send
    solve( !KU( mac(<'3', ~y, ~x>, ~skAB.2) ) @ #vk.4 )
      case A_3_Send
      solve( !KU( ~x ) @ #vk.7 )
        case A_1_Send
        solve( !KU( ~y ) @ #vk.5 )
          case B_2_Send
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Receive
  solve( St_A_4( a, ~id, skAB, skBA, b, x, y ) ▶₀ #i )
    case A_3_Send
    solve( !KU( mac(<'4', ~x, y>, ~skAB.1) ) @ #vk )
      case B_4_Send
      by contradiction /* from formulas */
    next
      case c_mac
      solve( !KU( ~skAB.1 ) @ #vk.6 )
        case Reveal_SK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Receive
  solve( St_A_4( a, ~id, skAB, skBA, b, x, y ) ▶₀ #i )
    case A_3_Send
    solve( !KU( mac(<'4', ~x, y>, ~skAB.1) ) @ #vk )
      case B_4_Send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case A_4_Receive
          solve( St_A_4( a2, ~id.1, skAB.2, skBA, b2, ~x, ~y ) ▶₀ #i2 )
            case A_3_Send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case A_4_Receive
          solve( St_A_4( a2, ~id.1, skAB.2, skBA, b2, ~x, ~y ) ▶₀ #i2 )
            case A_3_Send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( ~skAB.1 ) @ #vk.6 )
        case Reveal_SK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Receive
  solve( St_B_3( a, ~id, skAB, skBA, b, x, y ) ▶₀ #i )
    case B_2_Send
    solve( !KU( mac(<'3', ~y, x>, ~skAB) ) @ #vk )
      case A_3_Send
      by contradiction /* from formulas */
    next
      case c_mac
      solve( !KU( ~skAB ) @ #vk.6 )
        case Reveal_SK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Receive
  solve( St_B_3( a, ~id, skAB, skBA, b, x, y ) ▶₀ #i )
    case B_2_Send
    solve( !KU( mac(<'3', ~y, x>, ~skAB) ) @ #vk )
      case A_3_Send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case B_3_Receive
          solve( St_B_3( a2, ~id.1, skAB.2, skBA, b2, ~x, ~y ) ▶₀ #i2 )
            case B_2_Send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case B_3_Receive
          solve( St_B_3( a2, ~id.1, skAB.2, skBA, b2, ~x, ~y ) ▶₀ #i2 )
            case B_2_Send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( ~skAB ) @ #vk.6 )
        case Reveal_SK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

restriction Inequality:
  "∀ X Y #i. (NotEq( X, Y ) @ #i) ⇒ (¬(X = Y))"
  // safety formula

/* All well-formedness checks were successful. */

end