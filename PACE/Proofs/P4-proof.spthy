theory P4 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, kdf/3, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Shared_Key:
   [ Fr( ~skAB ) ] --[ NotEq( $A, $B ) ]-> [ !SKey( $A, $B, ~skAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_SK:
   [ !SKey( A, B, skAB ) ]
  --[ Reveal( A ), Reveal( B ) ]->
   [ Out( skAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !SKey( I, R, skAB ) ]
  --[ Create_A( I, ~id ) ]->
   [ St_A_1( I, ~id, skAB, R ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !SKey( I, R, skAB ) ]
  --[ Create_B( R, ~id ) ]->
   [ St_B_1( R, ~id, skAB, I ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_Send:
   [ St_A_1( I, ~id, skAB, R ), Fr( ~x ), Fr( ~s ) ]
  --[ Send( I, <'1', ~x, senc(~s, h(skAB))> ) ]->
   [
   St_A_2( I, ~id, skAB, R, ~x, ~s ),
   Out( <'1', ~x, senc(~s, h(skAB))> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_Receive:
   [ St_B_1( R, ~id, skAB, I ), In( <'1', x, senc(s, h(skAB))> ) ]
  --[ Receive( R, <'1', x, senc(s, h(skAB))> ) ]->
   [ St_B_2( R, ~id, skAB, I, x, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_Send:
   [ St_B_2( R, ~id, skAB, I, x, s ), Fr( ~y ) ]
  --[ Send( R, <'2', ~y> ) ]->
   [ St_B_3( R, ~id, skAB, I, x, s, ~y ), Out( <'2', ~y> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2_Receive:
   [ St_A_2( I, ~id, skAB, R, x, s ), In( <'2', y> ) ]
  --[ Receive( I, <'2', y> ) ]->
   [ St_A_3( I, ~id, skAB, R, x, s, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_3_Send:
   [ St_A_3( I, ~id, skAB, R, x, s, y ) ]
  --[
  Send( I, mac(<'3', y>, kdf(s, x, y)) ),
  Running( I, R, <'R', 'I', x, y, kdf(s, x, y)> )
  ]->
   [
   St_A_4( I, ~id, skAB, R, x, s, y ),
   Out( mac(<'3', y>, kdf(s, x, y)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_3_Receive:
   [
   St_B_3( R, ~id, skAB, I, x, s, y ),
   In( mac(<'3', y>, kdf(s, x, y)) )
   ]
  --[
  Receive( R, mac(<'3', y>, kdf(s, x, y)) ),
  Running( R, I, <'I', 'R', x, y, kdf(s, x, y)> )
  ]->
   [ St_B_4( R, ~id, skAB, I, x, s, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_4_Send:
   [ St_B_4( R, ~id, skAB, I, x, s, y ) ]
  --[
  Send( R, mac(<'4', x>, kdf(s, x, y)) ), Secret( R, kdf(s, x, y) ),
  Commit( R, I, <'R', 'I', x, y, kdf(s, x, y)> ), Honest( R ),
  Honest( I )
  ]->
   [
   St_B_5( R, ~id, skAB, I, x, s, y ),
   Out( mac(<'4', x>, kdf(s, x, y)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_4_Receive:
   [
   St_A_4( I, ~id, skAB, R, x, s, y ),
   In( mac(<'4', x>, kdf(s, x, y)) )
   ]
  --[
  Receive( I, mac(<'4', x>, kdf(s, x, y)) ),
  Secret( I, kdf(s, x, y) ),
  Commit( I, R, <'I', 'R', x, y, kdf(s, x, y)> ), Honest( I ),
  Honest( R ), Finish( )
  ]->
   [ St_A_5( I, ~id, skAB, R, x, s, y ) ]

  /* has exactly the trivial AC variant */

lemma executable:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i) ∧ ∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥"
*/
simplify
solve( St_A_4( I, ~id, skAB, R, x, s, y ) ▶₀ #i )
  case A_3_Send
  solve( !KU( mac(<'4', ~x>, kdf(~s, ~x, y)) ) @ #vk )
    case B_4_Send
    solve( !KU( senc(~s, h(~skAB.1)) ) @ #vk.9 )
      case A_1_Send
      solve( !KU( ~x ) @ #vk.9 )
        case A_1_Send
        solve( !KU( ~y ) @ #vk.7 )
          case B_2_Send
          solve( !KU( mac(<'3', ~y>, kdf(~s, ~x, ~y)) ) @ #vk.8 )
            case A_3_Send
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_Receive
  solve( St_A_4( A, ~id, skAB, R, x, s, y ) ▶₀ #i )
    case A_3_Send
    solve( !KU( kdf(~s, ~x, y) ) @ #vk )
      case c_kdf
      solve( !KU( ~s ) @ #vk.5 )
        case A_1_Send
        solve( !KU( ~skAB ) @ #vk.8 )
          case Reveal_SK
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case B_4_Send
  solve( St_B_4( A, ~id, skAB, I, x, s, y ) ▶₀ #i )
    case B_3_Receive
    solve( !KU( kdf(s, x, ~y) ) @ #vk )
      case c_kdf
      solve( !KU( mac(<'3', ~y>, kdf(s, x, ~y)) ) @ #vk.1 )
        case A_3_Send
        solve( !KU( ~s ) @ #vk.7 )
          case A_1_Send
          solve( !KU( ~skAB.1 ) @ #vk.12 )
            case Reveal_SK
            solve( !KU( senc(~s, h(~skAB)) ) @ #vk.9 )
              case A_1_Send
              by contradiction /* from formulas */
            next
              case c_senc
              solve( !KU( h(~skAB) ) @ #vk.13 )
                case c_h
                solve( !KU( ~skAB ) @ #vk.14 )
                  case Reveal_SK
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( senc(s, h(~skAB)) ) @ #vk.6 )
          case A_1_Send
          solve( !KU( ~s ) @ #vk.7 )
            case A_1_Send
            solve( !KU( ~skAB ) @ #vk.12 )
              case Reveal_SK
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~skAB) ) @ #vk.11 )
            case c_h
            solve( !KU( ~skAB ) @ #vk.12 )
              case Reveal_SK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Receive
  solve( St_A_4( a, ~id, skAB, b, x, s, y ) ▶₀ #i )
    case A_3_Send
    solve( !KU( mac(<'4', ~x>, kdf(~s, ~x, y)) ) @ #vk )
      case B_4_Send
      solve( !KU( senc(~s, h(~skAB.1)) ) @ #vk.9 )
        case A_1_Send
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~skAB ) @ #vk.13 )
            case Reveal_SK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.5 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.8 )
          case A_1_Send
          solve( !KU( ~skAB ) @ #vk.10 )
            case Reveal_SK
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Receive
  solve( St_A_4( a, ~id, skAB, b, x, s, y ) ▶₀ #i )
    case A_3_Send
    solve( !KU( mac(<'4', ~x>, kdf(~s, ~x, y)) ) @ #vk )
      case B_4_Send
      solve( !KU( senc(~s, h(~skAB.1)) ) @ #vk.9 )
        case A_1_Send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case A_4_Receive
            solve( St_A_4( a2, ~id.1, skAB.1, b2, ~x, ~s, ~y ) ▶₀ #i2 )
              case A_3_Send
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case A_4_Receive
            solve( St_A_4( a2, ~id.1, skAB.1, b2, ~x, ~s, ~y ) ▶₀ #i2 )
              case A_3_Send
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~skAB ) @ #vk.13 )
            case Reveal_SK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.5 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.8 )
          case A_1_Send
          solve( !KU( ~skAB ) @ #vk.10 )
            case Reveal_SK
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_4_Send
  solve( St_B_4( a, ~id, skAB, b, x, s, y ) ▶₀ #i )
    case B_3_Receive
    solve( !KU( mac(<'3', ~y>, kdf(s, x, ~y)) ) @ #vk )
      case A_3_Send
      solve( !KU( senc(~s, h(~skAB)) ) @ #vk.5 )
        case A_1_Send
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.9 )
          case A_1_Send
          solve( !KU( ~skAB.1 ) @ #vk.12 )
            case Reveal_SK
            solve( !KU( h(~skAB) ) @ #vk.12 )
              case c_h
              solve( !KU( ~skAB ) @ #vk.13 )
                case Reveal_SK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(s, x, ~y) ) @ #vk.7 )
        case c_kdf
        solve( !KU( senc(s, h(~skAB)) ) @ #vk.6 )
          case A_1_Send
          solve( !KU( ~s ) @ #vk.10 )
            case A_1_Send
            solve( !KU( ~skAB ) @ #vk.12 )
              case Reveal_SK
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~skAB) ) @ #vk.11 )
            case c_h
            solve( !KU( ~skAB ) @ #vk.12 )
              case Reveal_SK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_4_Send
  solve( St_B_4( a, ~id, skAB, b, x, s, y ) ▶₀ #i )
    case B_3_Receive
    solve( !KU( mac(<'3', ~y>, kdf(s, x, ~y)) ) @ #vk )
      case A_3_Send
      solve( !KU( senc(~s, h(~skAB)) ) @ #vk.5 )
        case A_1_Send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case B_4_Send
            solve( St_B_4( a2, ~id.1, skAB.1, b2, ~x, ~s, ~y ) ▶₀ #i2 )
              case B_3_Receive
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case B_4_Send
            solve( St_B_4( a2, ~id.1, skAB.1, b2, ~x, ~s, ~y ) ▶₀ #i2 )
              case B_3_Receive
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.9 )
          case A_1_Send
          solve( !KU( ~skAB.1 ) @ #vk.12 )
            case Reveal_SK
            solve( !KU( h(~skAB) ) @ #vk.12 )
              case c_h
              solve( !KU( ~skAB ) @ #vk.13 )
                case Reveal_SK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(s, x, ~y) ) @ #vk.7 )
        case c_kdf
        solve( !KU( senc(s, h(~skAB)) ) @ #vk.6 )
          case A_1_Send
          solve( !KU( ~s ) @ #vk.10 )
            case A_1_Send
            solve( !KU( ~skAB ) @ #vk.12 )
              case Reveal_SK
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~skAB) ) @ #vk.11 )
            case c_h
            solve( !KU( ~skAB ) @ #vk.12 )
              case Reveal_SK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

restriction Inequality:
  "∀ X Y #i. (NotEq( X, Y ) @ #i) ⇒ (¬(X = Y))"
  // safety formula

/* All well-formedness checks were successful. */

end